/* storage.c - KNoT Thing Storage handler */

/*
 * Copyright (c) 2018, CESAR. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <nvs/nvs.h>
#include <string.h>

/* Using first two pages of Flash's storage sector */
#define NVS_SECTOR_SIZE 	FLASH_ERASE_BLOCK_SIZE
#define NVS_STORAGE_OFFSET 	FLASH_AREA_STORAGE_OFFSET
#define NVS_SECTOR_COUNT 	2

static struct nvs_fs knot_fs = {
	.sector_size = NVS_SECTOR_SIZE,
	.sector_count = NVS_SECTOR_COUNT,
	.offset = NVS_STORAGE_OFFSET,
};

int8_t storage_init(void)
{
	return nvs_init(&knot_fs, FLASH_DEV_NAME);
}

int8_t storage_reset(void)
{
	/* Clear app credentials */
	return nvs_delete(&knot_fs, STORAGE_APP_SETTINGS_KEY);
}

int8_t storage_get(enum storage_key key, u8_t *value)
{
	ssize_t len;
	ssize_t read_len;

	switch (key) {
	case STORAGE_APP_SETTINGS_KEY:
		len = sizeof(struct storage_app_settings);
		break;
	default:
		return -1;
	}

	read_len = nvs_read(&knot_fs, key, value, len);

	if (read_len != len)
		return -EINVAL;

	/* Successful read */
	return 0;
}

int8_t storage_set(enum storage_key key, const u8_t *value)
{
	size_t len;

	switch (key) {
	case STORAGE_APP_SETTINGS_KEY:
		len = sizeof(struct storage_app_settings);
		break;
	default:
		return -1;
	}

	return nvs_write(&knot_fs, key, value, len);
}
