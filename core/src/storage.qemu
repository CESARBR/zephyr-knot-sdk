/* storage_mock.c - KNoT Thing Storage MOCK handler */

/*
 * Copyright (c) 2018, CESAR. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * This file works as a mock-up for the storage on NVM. It is intended to be
 * used for testing only.
 * To use with the nRF52840 board, use the storage.nrf52840 file.
 */

/* Buffer sizes */
#define UUID_LEN	36
#define TOKEN_LEN	40
#define IPV6_LEN	40

/* Buffers */
static char uuid[UUID_LEN];		/* Device UUID */
static char token[TOKEN_LEN];		/* Device Token */
static uint64_t devid;			/* Device ID */
static char peer_ipv6[IPV6_LEN];	/* Peer's IPV6 */

int storage_reset(void)
{
	LOG_DBG("Reseting mock storage");

	memset(uuid, 0, sizeof(uuid));
	memset(token, 0, sizeof(token));
	memset(&devid, 0, sizeof(devid));

	return 0;
}

int storage_init(void)
{
	LOG_DBG("Initializing mock storage");

	char peer_ipv6_buf[IPV6_LEN] = "2001:db8::2"; /* net-tools IPv6 */

#if 1
	/* New device testing */
	storage_reset();
#else
	/* Set known credentials */
	devid = 0xDEADBEEFFEEDBABE;
	memcpy(uuid,
	       "0354ec44-826e-4269-8855-a666b1e40000", sizeof(uuid));
	memcpy(token,
	       "924c222bc1f2e7d8648b43fd8fada6b4152fa905", sizeof(token));
#endif
	memcpy(peer_ipv6, peer_ipv6_buf, strlen(peer_ipv6_buf) + 1);

	return 0;
}

bool storage_is_set(enum storage_keys key)
{
	switch (key) {
	case STORAGE_CRED_UUID:
		return (!strlen(uuid) != 0);
	case STORAGE_CRED_TOKEN:
		return (!strlen(token) != 0);
	case STORAGE_CRED_DEVID:
		return (devid != 0);
	case STORAGE_PEER_IPV6:
		return (strlen(peer_ipv6) != 0);
	default:
		return false;
	}
}


int storage_read(enum storage_keys key, void *dest, int len)
{
	int olen;
	void *buf;

	if (storage_is_set(key) == false)
		return -ENOENT;

	switch (key) {
	case STORAGE_CRED_UUID:
		olen = (len < sizeof(uuid)) ? len : sizeof(uuid);
		buf = uuid;
		break;
	case STORAGE_CRED_TOKEN:
		olen = (len < sizeof(token)) ? len : sizeof(token);
		buf = token;
		break;
	case STORAGE_CRED_DEVID:
		olen = (len < sizeof(devid)) ? len : sizeof(devid);
		buf = &devid;
		break;
	case STORAGE_PEER_IPV6:
		olen = (len < sizeof(peer_ipv6)) ? len : sizeof(peer_ipv6);
		buf = peer_ipv6;
		break;
	default:
		return -ENOENT;
	}

	/* Return buffer value */
	memcpy(dest, buf, olen);

	return olen;
}

int storage_write(enum storage_keys key, const void *src, int len)
{
	int olen;
	void *buf;

	switch (key) {
	case STORAGE_CRED_UUID:
		olen = (len < sizeof(uuid)) ? len : sizeof(uuid);
		buf = uuid;
		break;
	case STORAGE_CRED_TOKEN:
		olen = (len < sizeof(token)) ? len : sizeof(token);
		buf = token;
		break;
	case STORAGE_CRED_DEVID:
		olen = (len < sizeof(devid)) ? len : sizeof(devid);
		buf = &devid;
		break;
	case STORAGE_PEER_IPV6:
		olen = (len < sizeof(peer_ipv6)) ? len : sizeof(peer_ipv6);
		buf = peer_ipv6;
		break;
	default:
		return -ENOENT;
	}

	/* Return buffer value */
	memcpy(buf, src, olen);

	return olen;
}
